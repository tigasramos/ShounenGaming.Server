// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShounenGaming.DataAccess.Persistence;

#nullable disable

namespace ShounenGaming.DataAccess.Persistence.Migrations
{
    [DbContext(typeof(ShounenGamingContext))]
    partial class ShounenGamingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShounenGaming.Core.Entities.Base.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscordId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Base.FileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Base.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscordId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscordImage")
                        .HasColumnType("text");

                    b.Property<bool>("DiscordVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.LeagueOfLegends.LeagueAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProfileIconId")
                        .HasColumnType("integer");

                    b.Property<string>("Puuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SummonerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SummonerLevel")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LeagueAccount");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.LeagueOfLegends.LeagueRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FreshBlood")
                        .HasColumnType("boolean");

                    b.Property<bool>("HotStreak")
                        .HasColumnType("boolean");

                    b.Property<bool>("Inactive")
                        .HasColumnType("boolean");

                    b.Property<string>("LeagueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LeaguePoints")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("QueueType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SummonerId")
                        .HasColumnType("integer");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Veteran")
                        .HasColumnType("boolean");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SummonerId");

                    b.ToTable("LeagueRank");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.Tier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("TierlistId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TierlistId");

                    b.ToTable("Tiers");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.TierChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TierId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserTierlistId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TierId");

                    b.HasIndex("UserTierlistId");

                    b.ToTable("TierChoices");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.Tierlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Tierlists");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.TierlistCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("TierlistCategories");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.TierlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TierChoiceId")
                        .HasColumnType("integer");

                    b.Property<int?>("TierlistId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("TierChoiceId");

                    b.HasIndex("TierlistId");

                    b.ToTable("TierlistItems");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.UserTierlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TierlistId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TierlistId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTierlists");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.LeagueOfLegends.LeagueAccount", b =>
                {
                    b.HasOne("ShounenGaming.Core.Entities.Base.User", "User")
                        .WithMany("LeagueAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.LeagueOfLegends.LeagueRank", b =>
                {
                    b.HasOne("ShounenGaming.Core.Entities.LeagueOfLegends.LeagueAccount", "Summoner")
                        .WithMany("Ranks")
                        .HasForeignKey("SummonerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Summoner");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.Tier", b =>
                {
                    b.HasOne("ShounenGaming.Core.Entities.Tierlists.Tierlist", null)
                        .WithMany("DefaultTiers")
                        .HasForeignKey("TierlistId");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.TierChoice", b =>
                {
                    b.HasOne("ShounenGaming.Core.Entities.Tierlists.Tier", "Tier")
                        .WithMany()
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShounenGaming.Core.Entities.Tierlists.UserTierlist", null)
                        .WithMany("Choices")
                        .HasForeignKey("UserTierlistId");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.Tierlist", b =>
                {
                    b.HasOne("ShounenGaming.Core.Entities.Tierlists.TierlistCategory", "Category")
                        .WithMany("Tierlists")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShounenGaming.Core.Entities.Base.FileData", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShounenGaming.Core.Entities.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.TierlistCategory", b =>
                {
                    b.HasOne("ShounenGaming.Core.Entities.Base.FileData", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.TierlistItem", b =>
                {
                    b.HasOne("ShounenGaming.Core.Entities.Base.FileData", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShounenGaming.Core.Entities.Tierlists.TierChoice", null)
                        .WithMany("Items")
                        .HasForeignKey("TierChoiceId");

                    b.HasOne("ShounenGaming.Core.Entities.Tierlists.Tierlist", null)
                        .WithMany("Items")
                        .HasForeignKey("TierlistId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.UserTierlist", b =>
                {
                    b.HasOne("ShounenGaming.Core.Entities.Tierlists.Tierlist", "Tierlist")
                        .WithMany()
                        .HasForeignKey("TierlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShounenGaming.Core.Entities.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tierlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Base.User", b =>
                {
                    b.Navigation("LeagueAccounts");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.LeagueOfLegends.LeagueAccount", b =>
                {
                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.TierChoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.Tierlist", b =>
                {
                    b.Navigation("DefaultTiers");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.TierlistCategory", b =>
                {
                    b.Navigation("Tierlists");
                });

            modelBuilder.Entity("ShounenGaming.Core.Entities.Tierlists.UserTierlist", b =>
                {
                    b.Navigation("Choices");
                });
#pragma warning restore 612, 618
        }
    }
}
